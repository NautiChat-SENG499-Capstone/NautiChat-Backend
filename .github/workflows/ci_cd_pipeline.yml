name: CI/CD Pipeline

on:
  push:
    branches: [ main, fix-deployment ]
  pull_request:

permissions:
  contents: read
  id-token: write

env:
  REGION: northamerica-northeast1 #torono
  ARTIFACT_REPO: nautichat
  IMAGE_NAME: >-
    ${{ vars.REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ vars.ARTIFACT_REPO }}/nautichat

jobs:
  # Tests
  test:
    runs-on: ubuntu-latest

    env:
      SUPABASE_DB_URL: "${{ secrets.SUPABASE_DB_URL }}"
      SECRET_KEY: ci_dummy_key
      ALGORITHM: HS256
      ACCESS_TOKEN_EXPIRE_HOURS: "24"
      REDIS_PASSWORD : ${{ secrets.REDIS_PASSWORD }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pytest

      - name: Run pytest
        run: python -m pytest -q
  build-pr:  # (just checks Docker build locally)
    if: github.event_name == 'pull_request'  && github.head_ref != 'fix-deployment' #Ensure fix-deployment goes through build->deploy
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          cache-from: type=gha
          cache-to:   type=gha,mode=max #    ^
          push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ github.sha }}

  # Build + Push
  build:
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/fix-deployment')
    runs-on: ubuntu-latest
    needs: test # require tests pass 

    steps:
      - uses: actions/checkout@v4

      # Google Cloud (Workload Identity)
      - id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCLOUD_SERVICE_KEY }}
          token_format: 'access_token'
          access_token_scopes: 'https://www.googleapis.com/auth/cloud-platform'

      # Docker login to ArtifactÂ Registry
      - uses: docker/login-action@v3
        with:
          username: 'oauth2accesstoken'
          password: ${{ steps.auth.outputs.access_token }}
          registry: '${{ env.REGION }}-docker.pkg.dev'

      - uses: docker/setup-buildx-action@v3

      - uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: true
          cache-from: type=gha
          cache-to:   type=gha,mode=max
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ github.sha }}

  # Deploy
  deploy:
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/fix-deployment')
    runs-on: ubuntu-latest
    needs: build
    environment: production

    steps:
      - id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCLOUD_SERVICE_KEY }}
          token_format: 'access_token'
          access_token_scopes: 'https://www.googleapis.com/auth/cloud-platform'

      - id: deploy
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service:  ${{ secrets.SERVICE_NAME }}
          region:   ${{ env.REGION }}
          image:    ${{ env.IMAGE_NAME }}:${{ github.sha }}
          flags: |
            --allow-unauthenticated
          env_vars: |
            SUPABASE_DB_URL: "${{ secrets.SUPABASE_DB_URL }}"
            SECRET_KEY=${{ vars.SECRET_KEY }}
            ALGORITHM=${{ vars.ALGORITHM }}
            ACCESS_TOKEN_EXPIRE_HOURS=${{ vars.ACCESS_TOKEN_EXPIRE_HOURS }}
            REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}

